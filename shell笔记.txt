一.文件安全与权限
	文件类型：
	-	普通文件
	p	命名管道文件
	c	字符设备文件
	b	块设备文件
	s	套接字文件
	l	符号链接
	d	目录

	文件权限：
	r	4	读
	w	2	写
	x	1	执行

	chmod改变权限：
	（符号模式)
	chmod	[who]	operator	[permission]	filename
	who:
		u	文件属主权限
		g	同组用户权限
		o	其他用户权限
		a	所有用户
	operator：
		+	增加权限
		-	取消权限
		=	设定权限
	permission:
		r	读权限
		w	写权限
		x	执行权限
		s	文件属主和组set-ID
		t	粘性位（只有属主可以删除）
		l	给文件加锁，其他用户无法访问
	(绝对模式)
	chmod	[mode]	file
	mode:	3位8进制数字

	chown改变属主
	chown -R -h owner file
		-R	对所有子目录下的文件都进行同样的操作
		-h	改变符号链接文件的属主时不影响该链接所指向的目标文件
	获取自己所属于的用户组：group / id
	获取其他用户所属于的用户组：group otheruser

	chgrp改变属组
	chgrp	owner	file

	umask(掩码)
	获取掩码：	umask
	设置掩码：	umask	nnn		---nnn为三位8进制数
	掩码计算：
	目录权限：	777  -  umask
	文件权限：	666  -  umask

	符号链接ln
	ln	[-s]	source_path	target_path


二.find和xargs
	find	pathname	-options	[-print -exec -ok]
		options:
			-name	按照文件名查找文件
			-perm	按照文件权限查找文件
			-prune	可以使find命令不在当前指定的目录中查找，如果同时使用-depth，-prune选项会被find命令忽略
			-user	按照文件属主查找文件
			-group	按照文件属组查找文件
			-mitime  -n  +n	按照文件的更改时间查找文件
					-n	更改时间距现在在n天以内
					+n	更改时间距现在在n天以前
			-atime	
			-mtime
			-nogroup查找无有效属组的文件，即该文件属组在/etc/groups中不存在
			-nouser	查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在
			-newer  file1  !  file2	查找更改时间比文件file1新但比文件file2旧的文件
			-type	查找某一类型的文件(b -块文件 ......  f  -普通文件)
			-size	n[c/k/m/..]	查找文件长度为n的文件,带c表示字节，k ...
						+n	超过n的文件
						-n	小于n的文件
			-depth	先从当前目录找，再从子目录中查找
			-fstype	查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件/etc/fstab中找到
			-mount	在查找文件时不跨越文件系统mount点
			-follow	如果find命令遇到符号链接文件，就跟踪至链接所指向的文件
			-cpio	对匹配文件使用cpio命令，将这些文件备份到磁带设备中
		-print	将匹配的文件输出到标准输出
		-exec	对匹配的文件执行该参数给出的shell命令	格式：command {}空格\;
		-ok	和-exec相同，但在每执行一个命令之前都会给出提示，让用户确定是否执行
	xargs	(用-exec传递的命令长度有限)
	|  xargs  command

三.后台执行命令
	crontab(系统管理员通过cron.deny和cron.allow禁止或允许用户拥有自己的crontab文件)
		域：
		分	时	日	月	周	命令
		1-59	0-23	1-31	1-12	0-6
	
		-  表示时间范围
		*  表示连续时间范围
		,  表示某几个时间点
		crontab命令形式:
			crontab	[-u user]  -e  -l  -r
				-u	用户名（使用自己的名字登录，不需要-u选项）
				-e	编辑crontab文件
				-l	列出crontab文件的内容
				-r	删除crontab文件
		创建新的crontab文件
			vi	<user>cron	如ztcron
			crontab ztcron
		备份crontab文件
			crontab  -l  >$HOME/mycron
		恢复crontab文件
			crontab	<filename>	如：crontab $HOME/mycron

	at(可以通过/etc/at.allow和at.deny来控制用户使用at命令)
	基本形式：at	[-f	script]	[-m  -l  -r]	[time]	[date]
		-f  script	要提交的脚本或命令
		-l	列出当前所有等待运行的作业	等同于atq
		-r	清除作业，清除某个作业，需要提供相应的标示（ID）
		-m	作业完成后给用户发邮件
		-time	可以是H,HH:MM,H,MH.M,也可以使用a.m,p.m
		-date	可以是月份或日期也可以today,tomorrow
	清除一个作业：
		atrm	[job  no]	或	at  -r  [job  no]

	&命令
	基本形式：命令	&
		作业在后台运行一样会将结果输出到屏幕，可使用以下方法：
		command	>out.file  2>&1  &
	查看进程：ps

	nohup
	一般形式：nohup	command	&
	在缺省情况下作业的所有输出都会被重定向到nohup.out文件中，可以另外指定输出文件：
		nohup	command	>  myout.file  2>&1


四.文件名置换
	*	匹配任何字符串，包括空字符串
	?	匹配任何单个字符
	[...]	匹配[]中所包含的任何单个字符
	[!...]	匹配[]中非感叹号!之后的字符


五.shell输入与输出
	echo
	一般形式：echo	string
	提示符出现在输出的字符串之后，可以用:
		echo	"string\c"
		read	string
	linux系统，必须用-n选项禁止echo命令输出后换行
		必须用-e才能使转移符生效

	read
	可以从键盘或文件的某一行文本中读入信息，并将其赋值给一个变量
	只指定一个变量，read将会把所有的输入赋值给该变量，直至遇到第一个文件结束符或回车
	一般形式：read	varible1  varible2  ...

	cat
	显示文本（会显示全部文件，可用cat  myfile | more 分页显示）
	创建文件:
		cat  >  myfile
		输入文字
		<Ctrl+D>
	显示控制字符：cat  -v  filename

	|  (管道)
	把一个命令的输出传递给另一个命令作为输入
	一般形式：command1  |  command2

	tee
	把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中
	一般形式：tee	-a	files
		-a表示追加

	重定向标准输出
	command  >  filename  或  command  1>  filename(不存在filename会自动创建filename,存在会先覆盖原先内容)
	command  >>  filename(追加方式)
	>  filename  会创建fielname

	重定向标准输入
	command  <  filename	command命令以filename文件作为标准输入
	command  <<  delimiter	从标准输入中读入，直到遇到delimiter分界符
	command  <  filename1  >  filename2	command命令以filename1文件作为标准输入，filename2文件作为标准输出

	重定向标准错误
	command  2>  filename	把标准错误重定向到filename中（覆盖方式）
	command  2>>  filename	（追加方式）

	command  >  filename  2>  &1	把标准输出和标准错误一起重定向到filename中（覆盖方式）
	command  >>  filename  2>  &1	（追加方式）


六.命令执行顺序
	&&
	一般形式：command1  &&  command2

	||
	一般形式：command1  &&  command2

	()和{}将命令结合起来


七.正则表达式
	^	只匹配行首
	$	只匹配行尾
	.	匹配单个任意字符
	*	一个单字符后跟*，匹配0或任意多个此字符
	\	屏蔽一个特殊字符的含义	特殊字符  $  .  '  "  *  [  ]  ^  |  ()  \  +  ?
	[]	匹配[]中的字符	[0-9]	[a-z]	[A-Z]	-表示范围
	pattern\{n\}	匹配模式出现n次
	pattern\{n,\}	匹配模式最少出现n次
	pattern\{n,m\}	匹配模式出现n到m次

八.grep
	-c	只输出匹配行的计数
	-i	不区分大小写(只适用于单字符)
	-h	查询多文件时不显示文件名
	-l	查询多文件时只输出包含匹配字符的文件名
	-n	显示匹配行及行号
	-s	不显示不存在或无匹配文本的错误消息
	-v	显示不包含匹配文本的所有行
	精准匹配：
	例如：显示只包含48的各行
	grep "48<tab>" file	或	grep '48\>' file
	不匹配行首:
	例如：行首不是48
	grep '^[^48]' file
	空行：‘^$'
九.awk（抽取数据包）
	命令行模式:	awk  [-F  分隔符]  'command'  input_files
	awk脚本:	awk  -f  awk_script_file input_files
	任何awk语句都由模式(BEGIN END)和动作{}组成：
	awk执行时，其浏览域标记为$1,$2...$n,$0表示所有域
	条件操作符
		同其他一样，~	匹配正则表达式
十.sed
	在命令行键入命令
		命令格式：	sed  [选项]  sed命令  inputfile
	将sed命令插入脚本文件，调用sed		sed  [选项]  -f  sed脚本文件  输入文件
	将sed命令插入脚本文件，使sed脚本可执行
	sed选项：
		n	不打印
		p	打印编辑行
		c	下一命令是编辑命令
		f	通知脚本文件支持所有sed命令
	查询文本：
		x		x为一行号
		x,y		行号范围从x到y
		/pattern/	查询包含模式的行
		/pattern/pattern/查询包含两个模式的行
		pattern/,x	在给定行号上查询包含的模式的行
		x,/pattern/	通过行号和模式查询匹配的行
		x,y!		查询不包含指定行号x和y的行
	编辑命令：
		p		打印匹配行
		=		显示文件行号
		a\		在定位行号后附加新文本信息
		i\		在定位行号后插入新文本信息
		d		删除定位行
		c\		用新文本替换定位文本
		s		使用替换模式替换相应模式
		r		从另一个文本中读文本
		w		写文本到一个文本
		q		第一个模式匹配完成后退出或立即退出
		l		显示与八进制ASCII代码等价的控制字符
		n		从另一个文本中读文本下一行，并附加在下一行
		g		将模式2粘贴到/pattern n/
		y		传送字符
		n		延续到下一输入行；允许跨行的模式匹配语句
	从shell向sed传值(双引号)
		$NAME="Hello,WORLD!"
		$REPALCE="HELLO"
		$echo  $NAME  |  sed  "s/Hello/$REPLACE/g"
		HELLO,WORLD!
	从sed输出中设置shell变量
		$NEW_NAME=`echo $NAME  |  sed  "s/Hello/$REPLACE/g"`
		$echo  $NEW_NAME
		HELLO,WORLD!
十一.合并与分割
	sort(将不同的域按不同列顺序分类)
	一般格式：
		sort  -cmu  -o  output_file  [other options]  +  pos1  +  pos2  input_files
		-c		测试文件是否已经分类
		-m		合并两个分类文件
		-u		删除所有复制行
		-o		存储sort结果的输出文件名
		其他选项：
		-b		使用域进行分类时，忽略第一个空格
		-t		域分隔符；用非空格或tab键分隔域
		-r		对分类次序或比较求逆
		n		n为域号，在分类比较时忽略此域
		+n		n为域号，从此域号开始分类
		-n		指定分类是域上的数字分类
	unique（从一个文本中去除或禁止重复行，重复行是指连续不断出现的行）
	一般格式：
		unique  -u  d  c  -f  input_file output_file
		-u		只显示不重复的行
		-d		只显示有重复数据行，每种重复行只显示其中一行
		-c		打印每一重复行出现次数
		-f/n		忽略前n个域
	join（将两个分类文本文件的行连接起来）
	一般格式：
		join  [options]  input_file1  input_file2
		选项：
		-an		连接时从文件n中显示不匹配行
		-o  n.m		只显示文件n的第m域
		-jn  m		使用文件n的第m域进行连接
		-t  域分隔符	设置非空格或tab键的域分隔符
	cut（从标准输入或文本文件中剪切列或域）
	一般格式：
		cut  [options]  file1  file2
		选项：
		-c  list	指定剪切字符数
		-f  field	指定剪切域数
		-d  		指定非空格或tab键不同的域分隔符
	paste(将数据粘贴起来形成相关文件)
	一般格式：
		paste  -d  -s  file1  file2
		选项：
		-d		指定非空格或tab键不同的域分隔符
		-s		将每个文件合并成行而不是按行粘贴
		-		对每一个(-),从标准输入中读一次数据
	split(将大文件分割成小文件）
	一般格式：
		split  -output_file_size  input_file  output_file
		output_file_size是分割的行数
		分割的文件以x[aa]――x[ZZ]顺序为文件名
十二.tr
	tr用来从标准输入中通过替换或删除操作进行字符替换
	一般格式：
		tr  -c  -d  -s  ["string1"]  ["string2"]  <  input_file
		-c		用字符串1中字符集的补集替换此字符集，要求字符集为ASCII
		-d		删除字符串1中所有的输入字符
		-s		删除所有重复出现的字符序列，只保留第一个
	字符集：
	[a-z]		a-z内的字符组成的字符串
	[A-Z]		A-Z内的字符组成的字符串
	[0-9]		数字串
	\octal		三位八进制对应的有效ASCII字符
	[O*n]		字符O重复出现指定次数n
	tr所有功能都可以用sed完成
十三.登录环境
	登录系统时，系统会查询/etc/passwd文件，检查用户名和密码
	/etc/passwd文件中
	[    ]:[	   ]:[	]:[  ]:[       ]:[         ]:[              ]
	用户名    加密的密码            用户全名  用户根目录  用户使用的shell
	登录成功后，系统会执行两个环境设置文件：/etc/profile和根目录下.profile
	/etc/profile包括：
		全局或局部变量
		PATH信息
		终端设置
		安全命令
		日期信息或放弃操作信息